// <auto-generated />
using System;
using DocumentStoreManagement.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DocumentStoreManagement.Infrastructure.Migrations.PostgresApplication
{
    [DbContext(typeof(PostgresApplicationContext))]
    [Migration("20231006073536_InitialPostgresDatabase")]
    partial class InitialPostgresDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DocumentStoreManagement.Core.Models.MongoDB.Document", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ReleaseQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Documents");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Document");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DocumentStoreManagement.Core.Models.MongoDB.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DocumentStoreManagement.Core.Models.MongoDB.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("DocumentStoreManagement.Core.Models.MongoDB.Book", b =>
                {
                    b.HasBaseType("DocumentStoreManagement.Core.Models.MongoDB.Document");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PageNumber")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("DocumentStoreManagement.Core.Models.MongoDB.Magazine", b =>
                {
                    b.HasBaseType("DocumentStoreManagement.Core.Models.MongoDB.Document");

                    b.Property<string>("ReleaseMonth")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ReleaseNumber")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Magazine");
                });

            modelBuilder.Entity("DocumentStoreManagement.Core.Models.MongoDB.Newspaper", b =>
                {
                    b.HasBaseType("DocumentStoreManagement.Core.Models.MongoDB.Document");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue("Newspaper");
                });

            modelBuilder.Entity("DocumentStoreManagement.Core.Models.MongoDB.OrderDetail", b =>
                {
                    b.HasOne("DocumentStoreManagement.Core.Models.MongoDB.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentStoreManagement.Core.Models.MongoDB.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Order");
                });
#pragma warning restore 612, 618
        }
    }
}
